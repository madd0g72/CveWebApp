@model CveWebApp.Models.AccessLogsViewModel

@{
    ViewData["Title"] = "Application Access Logs";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2>@ViewData["Title"]</h2>
        <p class="text-muted">Monitor login attempts and application access history.</p>
    </div>
    <div>
        <button type="button" class="btn btn-outline-warning" data-bs-toggle="modal" data-bs-target="#clearLogsModal">
            <i class="fas fa-trash"></i> Clear Old Logs
        </button>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Filters -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="fas fa-filter"></i> Filters
        </h5>
    </div>
    <div class="card-body">
        <form method="get" asp-action="Index">
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group mb-3">
                        <label asp-for="UsernameFilter" class="form-label"></label>
                        <input asp-for="UsernameFilter" class="form-control" placeholder="Username or email" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group mb-3">
                        <label asp-for="IpFilter" class="form-label"></label>
                        <input asp-for="IpFilter" class="form-control" placeholder="IP address" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group mb-3">
                        <label asp-for="SuccessFilter" class="form-label"></label>
                        <select asp-for="SuccessFilter" class="form-select">
                            <option value="">All</option>
                            <option value="true">Success</option>
                            <option value="false">Failed</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group mb-3">
                        <label asp-for="FromDate" class="form-label"></label>
                        <input asp-for="FromDate" class="form-control" type="date" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group mb-3">
                        <label asp-for="ToDate" class="form-label"></label>
                        <input asp-for="ToDate" class="form-control" type="date" />
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="form-group mb-3">
                        <label class="form-label">&nbsp;</label>
                        <button type="submit" class="btn btn-primary d-block">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i> Clear Filters
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Results Summary -->
<div class="row mb-3">
    <div class="col-md-6">
        <p class="text-muted">
            Showing @Model.LoginAttempts.Count of @Model.TotalItems log entries
            @if (Model.TotalPages > 1)
            {
                <span>(Page @Model.Page of @Model.TotalPages)</span>
            }
        </p>
    </div>
    <div class="col-md-6 text-end">
        <div class="btn-group" role="group">
            <label class="btn btn-outline-secondary btn-sm">
                Page Size:
                <select onchange="changePageSize(this.value)" class="form-select form-select-sm d-inline-block ms-1" style="width: auto;">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </label>
        </div>
    </div>
</div>

<!-- Access Logs Table -->
<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Timestamp</th>
                <th>Username</th>
                <th>Email</th>
                <th>Source IP</th>
                <th>Result</th>
                <th>Reason</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.LoginAttempts.Any())
            {
                @foreach (var log in Model.LoginAttempts)
                {
                    <tr class="@(log.IsSuccess ? "" : "table-danger")">
                        <td>
                            <span title="@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss") UTC">
                                @log.Timestamp.ToString("MM-dd HH:mm")
                            </span>
                        </td>
                        <td>@log.Username</td>
                        <td>@(log.Email ?? "-")</td>
                        <td>
                            <code>@log.SourceIP</code>
                        </td>
                        <td>
                            @if (log.IsSuccess)
                            {
                                <span class="badge bg-success">
                                    <i class="fas fa-check"></i> Success
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-danger">
                                    <i class="fas fa-times"></i> Failed
                                </span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(log.FailureReason))
                            {
                                <span class="text-danger">@log.FailureReason</span>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            <button type="button" class="btn btn-sm btn-outline-info" 
                                    onclick="showLogDetails(@log.Id)"
                                    title="View Details">
                                <i class="fas fa-info-circle"></i>
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="7" class="text-center text-muted py-4">
                        <i class="fas fa-inbox fa-2x mb-2"></i>
                        <br />
                        No log entries found matching the current filters.
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Pagination -->
@if (Model.TotalPages > 1)
{
    <nav aria-label="Log entries pagination">
        <ul class="pagination justify-content-center">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@GetPageUrl(1)">First</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="@GetPageUrl(Model.Page - 1)">Previous</a>
                </li>
            }

            @for (int i = Math.Max(1, Model.Page - 2); i <= Math.Min(Model.TotalPages, Model.Page + 2); i++)
            {
                <li class="page-item @(i == Model.Page ? "active" : "")">
                    <a class="page-link" href="@GetPageUrl(i)">@i</a>
                </li>
            }

            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@GetPageUrl(Model.Page + 1)">Next</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="@GetPageUrl(Model.TotalPages)">Last</a>
                </li>
            }
        </ul>
    </nav>
}

<!-- Log Details Modal -->
<div class="modal fade" id="logDetailsModal" tabindex="-1" aria-labelledby="logDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" id="logDetailsContent">
            <!-- Content will be loaded dynamically -->
        </div>
    </div>
</div>

<!-- Clear Logs Modal -->
<div class="modal fade" id="clearLogsModal" tabindex="-1" aria-labelledby="clearLogsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clearLogsModalLabel">Clear Old Log Entries</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="Clear" method="post">
                <div class="modal-body">
                    <p>Remove log entries older than the specified number of days.</p>
                    <div class="form-group">
                        <label for="daysToKeep" class="form-label">Days to Keep:</label>
                        <select name="daysToKeep" id="daysToKeep" class="form-select">
                            <option value="7">7 days</option>
                            <option value="14">14 days</option>
                            <option value="30" selected>30 days</option>
                            <option value="60">60 days</option>
                            <option value="90">90 days</option>
                        </select>
                    </div>
                    <div class="alert alert-warning mt-3">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Warning:</strong> This action cannot be undone.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">Clear Old Logs</button>
                </div>
            </form>
        </div>
    </div>
</div>

@functions {
    string GetPageUrl(int page)
    {
        var routeValues = new Dictionary<string, object>();
        
        // Add current filter values to maintain them in pagination
        if (!string.IsNullOrEmpty(Model.UsernameFilter))
            routeValues["UsernameFilter"] = Model.UsernameFilter;
        if (!string.IsNullOrEmpty(Model.IpFilter))
            routeValues["IpFilter"] = Model.IpFilter;
        if (Model.SuccessFilter.HasValue)
            routeValues["SuccessFilter"] = Model.SuccessFilter.Value;
        if (Model.FromDate.HasValue)
            routeValues["FromDate"] = Model.FromDate.Value.ToString("yyyy-MM-dd");
        if (Model.ToDate.HasValue)
            routeValues["ToDate"] = Model.ToDate.Value.ToString("yyyy-MM-dd");
        
        routeValues["Page"] = page;
        routeValues["PageSize"] = Model.PageSize;
        
        return Url.Action("Index", routeValues) ?? "";
    }
}

@section Scripts {
    <script>
        function showLogDetails(logId) {
            fetch(`@Url.Action("Details", "AccessLogs")/${logId}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('logDetailsContent').innerHTML = html;
                    new bootstrap.Modal(document.getElementById('logDetailsModal')).show();
                })
                .catch(error => {
                    console.error('Error loading log details:', error);
                    alert('Error loading log details.');
                });
        }

        function changePageSize(newSize) {
            const url = new URL(window.location);
            url.searchParams.set('pageSize', newSize);
            url.searchParams.set('page', '1'); // Reset to first page
            window.location.href = url.toString();
        }
    </script>
}