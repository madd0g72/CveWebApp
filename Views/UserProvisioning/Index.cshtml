@model CveWebApp.Models.UserProvisioningViewModel

@{
    ViewData["Title"] = "User Provisioning";
}

<div class="row">
    <div class="col-md-8">
        <h2>@ViewData["Title"]</h2>
        <p class="text-muted">Create new application users and assign roles.</p>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <form asp-action="Index" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Username" class="form-label"></label>
                        <input asp-for="Username" class="form-control" />
                        <span asp-validation-for="Username" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Email" class="form-label"></label>
                        <input asp-for="Email" class="form-control" type="email" />
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="FullName" class="form-label"></label>
                        <input asp-for="FullName" class="form-control" />
                        <span asp-validation-for="FullName" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Password" class="form-label"></label>
                        <input asp-for="Password" class="form-control" type="password" />
                        <span asp-validation-for="Password" class="text-danger"></span>
                        <div class="form-text">Password must be at least 4 characters long.</div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="SelectedRole" class="form-label"></label>
                        <select asp-for="SelectedRole" class="form-select">
                            <option value="">-- Select Role --</option>
                            @foreach (var role in Model.AvailableRoles)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                        <span asp-validation-for="SelectedRole" class="text-danger"></span>
                        <div class="form-text">
                            <strong>Admin:</strong> Full system access<br />
                            <strong>User:</strong> Standard user access<br />
                            <strong>operator:</strong> Operational user access
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-user-plus"></i> Create User
                </button>
                <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Role Descriptions</h5>
            </div>
            <div class="card-body">
                <dl>
                    <dt>Admin</dt>
                    <dd>Full administrative access including user management, CVE data import, and system configuration.</dd>
                    
                    <dt>User</dt>
                    <dd>Standard user access to view CVE data and dashboards.</dd>
                    
                    <dt>operator</dt>
                    <dd>Operational access for users who need to perform specific tasks beyond standard viewing.</dd>
                </dl>
            </div>
        </div>
    </div>
</div>

@if (Model.ExistingUsers.Any())
{
    <hr class="my-4" />
    
    <div class="row">
        <div class="col-12">
            <h3>Current Application Users</h3>
            <p class="text-muted">Manage existing user accounts and roles.</p>
            
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Full Name</th>
                            <th>Roles</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model.ExistingUsers)
                        {
                            <tr class="@(user.IsCurrentUser ? "table-warning" : "")">
                                <td>
                                    @user.Username
                                    @if (user.IsCurrentUser)
                                    {
                                        <span class="badge bg-secondary ms-1">You</span>
                                    }
                                </td>
                                <td>@user.Email</td>
                                <td>@user.FullName</td>
                                <td>
                                    @foreach (var role in user.Roles)
                                    {
                                        <span class="badge bg-@(role == "Admin" ? "danger" : role == "operator" ? "warning" : "primary") me-1">@role</span>
                                    }
                                </td>
                                <td>@user.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-primary" 
                                                onclick="manageUserRoles('@user.Id', '@user.Username')"
                                                title="Manage Roles">
                                            <i class="fas fa-user-cog"></i>
                                        </button>
                                        @if (!user.IsCurrentUser)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                                    onclick="deleteUser('@user.Id', '@user.Username')"
                                                    title="Delete User">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

<!-- Role Management Modal -->
<div class="modal fade" id="roleManagementModal" tabindex="-1" aria-labelledby="roleManagementModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" id="roleManagementContent">
            <!-- Content will be loaded dynamically -->
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteUserModalLabel">Confirm Delete User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete user <strong id="deleteUserName"></strong>?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete User</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        let userToDelete = null;

        function manageUserRoles(userId, username) {
            // Load the role management modal content
            fetch(`@Url.Action("ManageRoles", "UserProvisioning")/${userId}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('roleManagementContent').innerHTML = html;
                    new bootstrap.Modal(document.getElementById('roleManagementModal')).show();
                })
                .catch(error => {
                    console.error('Error loading role management modal:', error);
                    alert('Error loading role management interface.');
                });
        }

        function deleteUser(userId, username) {
            userToDelete = userId;
            document.getElementById('deleteUserName').textContent = username;
            new bootstrap.Modal(document.getElementById('deleteUserModal')).show();
        }

        document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
            if (userToDelete) {
                // Create form data
                const formData = new FormData();
                formData.append('id', userToDelete);
                formData.append('__RequestVerificationToken', 
                    document.querySelector('input[name="__RequestVerificationToken"]').value);

                fetch('@Url.Action("DeleteUser", "UserProvisioning")', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // Refresh the page to show updated user list
                    } else {
                        alert(data.message || 'Error deleting user.');
                    }
                })
                .catch(error => {
                    console.error('Error deleting user:', error);
                    alert('Error deleting user.');
                });

                bootstrap.Modal.getInstance(document.getElementById('deleteUserModal')).hide();
                userToDelete = null;
            }
        });

        function updateUserRoles(userId) {
            const form = document.getElementById('roleManagementForm');
            const formData = new FormData(form);

            fetch('@Url.Action("UpdateRoles", "UserProvisioning")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // Refresh the page to show updated roles
                } else {
                    alert(data.message || 'Error updating user roles.');
                }
            })
            .catch(error => {
                console.error('Error updating user roles:', error);
                alert('Error updating user roles.');
            });

            bootstrap.Modal.getInstance(document.getElementById('roleManagementModal')).hide();
        }
    </script>
}